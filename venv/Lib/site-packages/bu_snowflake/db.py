import argparse
import bu_snowflake.config as config
import snowflake.connector
import sqlalchemy
from snowflake.sqlalchemy import URL

from bu_snowflake import __version__

__author__ = "chetanbiourja"
__copyright__ = "chetanbiourja"
__license__ = "mit"
 

def get_connection(
    username: str = "",
    password: str = "",
    warehouse: str = "",
    role: str = "",
    schema: str = "",
    database: str = "",
) -> snowflake.connector.SnowflakeConnection:
    """Function to get cursor for snowflake connection object.

    :param username: Snowflake Username., defaults to "service account user"
    :type username: str, optional
    :param password: Snowflake Password., defaults to "service accound password"
    :type password: str, optional
    :param warehouse: Snowflake Warehouse name., defaults to "ITPYTHON_WH"
    :type warehouse: str, optional
    :param role: Snowflake role., defaults to "ITPYTHON_WH"
    :type role: str, optional
    :param schema: Schema Name., defaults to ""
    :type schema: str, optional
    :param database: Database Name., defaults to ""
    :type database: str, optional
    :return: Returns a :class:`snowflake.connector.SnowflakeConnection` object with connection details specified and empty object if connection fails.
    :rtype: snowflake.connector.SnowflakeConnection
    """

    print('Connection initialized!')
    configuration = config.SnowConfig()
    pkb = configuration.get_private_key()
    snowflake.connector.paramstyle = 'qmark'
    connection = snowflake.connector.SnowflakeConnection
    try:
        user = username or configuration.username
        warehouse = warehouse or configuration.warehouse
        database = database or configuration.database
        schema = schema or configuration.schema
        role = role or configuration.role
        if password:
            connection = snowflake.connector.connect(
                account=configuration.account,
                user=user,
                password=password,
                warehouse=warehouse,
                database=database,
                schema=schema,
                role=role,
                autocommit=True,
                paramstyle='qmark'
            )
        else:
            print('Using service account with secure auth...')
            connection = snowflake.connector.connect(
                account=configuration.account,
                user=user,
                private_key=pkb,
                warehouse=warehouse,
                database=database,
                schema=schema,
                role=role,
                autocommit=True,
                paramstyle='qmark'
            )

        with connection.cursor() as conxn:
            print(conxn.execute("SELECT 1").fetchone())
        print("Connection established, returning Snowflake Connection Object!")

    except Exception as e:
        print(f"Error in conneting to database. More Details : {e}")
    finally:
        return connection


def get_engine(
    username: str = "",
    password: str = "",
    warehouse: str = "",
    role: str = "",
    schema: str = "",
    database: str = "",
) -> sqlalchemy.engine.Engine:
    """Function to get cursor for snowflake-sqlalchemy engine object.

    :param username: Snowflake Username., defaults to "service account user"
    :type username: str, optional
    :param password: Snowflake Password., defaults to "service accound password"
    :type password: str, optional
    :param warehouse: Snowflake Warehouse name., defaults to "ITPYTHON_WH"
    :type warehouse: str, optional
    :param role: Snowflake role., defaults to "ITPYTHON_WH"
    :type role: str, optional
    :param schema: Schema Name., defaults to ""
    :type schema: str, optional
    :param database: Database Name., defaults to ""
    :type database: str, optional
    :return: Returns a :class:`sqlalchemy.engine.Engine` object with connection details specified and empty object if connection fails.
    :rtype: sqlalchemy.engine.Engine
    """

    print('Connection initialized!')
    configuration = config.SnowConfig()
    pkb = configuration.get_private_key()
    engine = sqlalchemy.engine.Engine
    user = username or configuration.username
    warehouse = warehouse or configuration.warehouse
    database = database or configuration.database
    schema = schema or configuration.schema
    role = role or configuration.role
    try:
        if password:
            engine = sqlalchemy.create_engine(URL(
                account=configuration.account,
                user=user,
                password=password,
                warehouse=warehouse,
                database=database,
                schema=schema,
                role=role,
                autocommit=True,
                paramstyle='pyformat'
            ))
        else:
            print('Using service account with secure auth...')
            engine = sqlalchemy.create_engine(URL(
                account=configuration.account,
                user=user,
                warehouse=warehouse,
                database=database,
                schema=schema,
                role=role,
                autocommit=True,
                paramstyle='pyformat'
            ),
            connect_args={
                    'private_key': pkb,
            },)
        with engine.connect() as conxn:
            print(conxn.execute("SELECT 1").fetchone())
        print("Connection established, returning SQLAlchemy engine!")
    except Exception as e:
        print(f"Error in conneting to database. More Details : {e}")
    finally:
        return engine


def parse_args(args):
    """Parse command line parameters

    Args:
      args ([str]): command line parameters as list of strings

    Returns:
      :obj:`argparse.Namespace`: command line parameters namespace
    """
    parser = argparse.ArgumentParser(
        description="Internal Package for snowflake db")
    parser.add_argument(
        "--version",
        action="version",
        version="bu_snowflake {ver}".format(ver=__version__))

    return parser.parse_args(args)


def main(args):
    """Main entry point allowing external calls

    Args:
      args ([str]): command line parameter list
    """
    parsed_args = parse_args(args)
    print(parsed_args)
    return True


if __name__ == "__main__":
    # main(sys.argv[1:])
    # get_engine()
    # conn = get_connection()
    engine = get_engine()
