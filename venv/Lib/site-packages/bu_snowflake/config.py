from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from pathlib import Path

config = {
            "SFUSERNAME": "SVC_PYTHON",
            "SFPASSWORD":"xoxoxoxoxo", 
            "SFACCOUNT": "os54042.east-us-2.azure",
            "SFWAREHOUSE": "ITPYTHON_WH", 
            "SFDATABASE": "POWERDB_DEV", 
            "SFSCHEMA": "PTEST", 
            "SFROLE": "OWNER_POWERDB_DEV"
        }


class Config(object):
    def __init__(self):
        """__init__ method to initialize the object

        :param object: Self object passed in init.
        :type object: `object`
        """
        self._config = config

    def get_property(self, property_name):
        """Get property method to retrieve the properties form config.

        :param property_name: Name of the property.
        :type property_name: `object`
        """
        if property_name not in self._config.keys():  # we don't want KeyError
            return None
        return self._config[property_name]

    def get_private_key(self):
        pass


class SnowConfig(Config):

    @property
    def username(self):
        """Get username.

        :return: Returns username.
        :rtype: str
        """
        return self.get_property('SFUSERNAME')


    @property
    def account(self):
        """Get account.

        :return: Returns account.
        :rtype: str
        """
        return self.get_property('SFACCOUNT')

    @property
    def warehouse(self):
        """Get warehouse.

        :return: Returns warehouse.
        :rtype: str
        """
        return self.get_property('SFWAREHOUSE')

    @property
    def database(self):
        """Get database.

        :return: Returns database.
        :rtype: str
        """
        return self.get_property('SFDATABASE')

    @property
    def schema(self):
        """Get schema.

        :return: Returns schema.
        :rtype: str
        """
        return self.get_property('SFSCHEMA')

    @property
    def role(self):
        """Get role.

        :return: Returns role.
        :rtype: str
        """
        return self.get_property('SFROLE')

    def get_private_key(self):
        pkb = None
        try:
            with open(Path(Path(__file__).parent.__str__()+'/rsa_key.p8').__str__(), "rb") as key:
                p_key= serialization.load_pem_private_key(
                key.read(),
                password=config['SFPASSWORD'].encode(),
                backend=default_backend()
            )
            pkb = p_key.private_bytes(
                encoding=serialization.Encoding.DER,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            )
        except:
            with open('rsa_key.p8', "rb") as key:
                p_key= serialization.load_pem_private_key(
                key.read(),
                password=config['SFPASSWORD'].encode(),
                backend=default_backend()
            )
            pkb = p_key.private_bytes(
                encoding=serialization.Encoding.DER,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            )
        return pkb