import pandas as pd
from bu_snowflake import get_connection
import sharepy
import os
import io


class SharePoint():


    def __init__(self,other_vert=False):
            self.site = 'https://biourja.sharepoint.com'
            self.conn = self.connect_to_sharepoint()

    def connect_to_sharepoint(self):
        username = os.getenv("user") if os.getenv("user") else "svc_tableauonline@biourja.com"
        password = os.getenv("password") if os.getenv("password") else "L!,'W%^9#@}rzf6NGyZKwz"
        # Connecting to Sharepoint and downloading the file with sync params
        s = sharepy.connect(self.site, username, password)
        return s
    
    def get_file(self,other_vert):
        if other_vert:
            path1 = "/itdev/_api/web/GetFolderByServerRelativeUrl"
            path2 = "('Shared Documents/IT/BU_Config_Params')/Files('BU_CONFIG.xlsx')/$value"
        else:   
            path1 = "/BiourjaPower/_api/web/GetFolderByServerRelativeUrl"
            path2 = "('Shared Documents/Power DB Uploads')/Files('BU_CONFIG_PARAMS.xlsx')/$value"
        path = path1 + path2
        r = self.conn.get(self.site + path)
        bytes_file_obj = io.BytesIO()
        bytes_file_obj.write(r.content)
        bytes_file_obj.seek(0) #set file object to start
        return pd.read_excel(bytes_file_obj,engine = 'openpyxl')


        
def get_config(
    process_name:str,
    table_name:str,
    other_vert=False
    ) -> dict:
    """get_config functionality to get the config details for specific process and table.
    :param process_name: Name of the process.
    :type process_name: str
    :param table_name: Name of the main output table_name used process.
    :type process_name: str
    """
    if other_vert:
        conn=get_connection(role='OWNER_BUITDB_DEV',database="BUITDB_DEV", schema="PLOG", warehouse="BUIT_WH")
        sql = f"select * from BUITDB_DEV.PLOG.BU_CONFIG_PARAMS where PROJECT_NAME = '{process_name}' and TABLE_NAME = '{table_name}'"
        cs=conn.cursor()
    else:    
        conn=get_connection(role='OWNER_POWERDB',database="POWERDB", schema="PLOG")
        sql = f"select * from POWERDB.PLOG.BU_CONFIG_PARAMS where PROJECT_NAME = '{process_name}' and TABLE_NAME = '{table_name}'"
        cs=conn.cursor()
    try:
        cs.execute(sql)  
        df = pd.DataFrame.from_records(iter(cs), columns=[x[0] for x in cs.description])
        if df.empty == True:
            raise Exception(f"No configrations set for process {process_name} and table {table_name} in snowflake.")
    except Exception as e:
        print(f"Error ============{e}")
        sp = SharePoint()
        df = sp.get_file(other_vert)
        df = df[(df['PROJECT_NAME'] == process_name) & (df['TABLE_NAME'] == table_name)]

    conn.close()    
    if len(df.to_dict(orient='records')) == 1:
        return df.to_dict(orient='records')[0]
    elif len(df.to_dict(orient='records')) > 1:
        raise Exception(f"Multiple configrations set for process {process_name} and table {table_name} in snowflake.")
    else:
        raise Exception(f"No configrations set for process {process_name} and table {table_name} in Sharepoint & snowflake.")

def get_multi_config(
    process_name:str,
    ) -> dict:
    """get_config functionality to get the config details for specific process and table.
    :param process_name: Name of the process.
    :type process_name: str
    """
    conn=get_connection(role='OWNER_POWERDB',database="POWERDB", schema="PLOG")
    sql = f"select * from POWERDB.PLOG.BU_CONFIG_PARAMS where PROJECT_NAME = '{process_name}'"
    cs=conn.cursor()
    try:
        cs.execute(sql)  
        df = pd.DataFrame.from_records(iter(cs), columns=[x[0] for x in cs.description])
        if df.empty == True:
            raise Exception(f"No configrations set for process {process_name} in snowflake.")
    except Exception as e:
        print(f"Error ============{e}")
        sp = SharePoint()
        df = sp.get_file()
        df = df[(df['PROJECT_NAME'] == process_name)]

    conn.close()    
    if len(df.to_dict(orient='records')) > 1:
        return df.to_dict(orient='records')
    else:
        raise Exception(f"No configrations set for process {process_name} in Sharepoint & snowflake.")

