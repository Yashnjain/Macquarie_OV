Metadata-Version: 2.1
Name: bu-snowflake
Version: 0.1.0
Summary: Snowflake interaction wrapper for BU!
Home-page: https://gitlab.com/biourjapower/bu_snowflake
Author: chetanbiourja
Author-email: chetan.surwade@biourja.com
License: mit
Project-URL: Documentation, https://gitlab.com/biourjapower/bu_snowflake
Description: ============
        bu_snowflake
        ============
        
        
        Snowflake Wrapper package for internal use!
        
        
        ***********
        Description
        ***********
        
        - This package has been created to uniformly interact with snowflake database with sqlalchemy along with option to use native connector as well.
        - Make sure you have git installed - https://git-scm.com/
        - Make sure you have Python - 3.8.5 or higher installed on the system or install it by:
           ``https://www.python.org/downloads/ and run as admin, and make sure it is 64-bit``
        - It is adviced to use virtual environment for package installation.
           ``python -m venv venv`` to create a virtual env with name venv (or anything else of your choice)
           
           ``.\venv\Scripts\activate.bat`` to activate the environment
        
        
        - Install the package using pip
            ``python -m pip install git+https://gitlab.com/biourjapower/bu_snowflake.git@v0.1.0``
        
        How to use it ?
        ^^^^^^^^^^^^^^^^^^^^^
        
        - Simply import like any other python package and use any of the two methods for connection.
        
        
        .. code-block:: python
        
            import bu_snowflake
            #by default uses service credentials
        
            #args to override system defaults goes here namely 
            username, password, database, schema, warehouse, role like this
            """
                engine = bu_snowflake.get_engine(
                    username= "",
                    password= "",
                    warehouse= "",
                    role= "",
                    schema= "",
                    database= "",
                )
            """
            engine = bu_snowflake.get_engine()
            try:
                with engine.connect() as con:
                    con.execute("SQL QUERY GOES HERE")
            except Execption as e:
                print(f"error occurred : {e}")
            finally:
                engine.dispose()
        
            #or use with pandas like this:
            with engine.connect() as con:
                df = pd.read_sql("SQL QUERY",con=con)
        
            #or use native connector approach like this:
        
            import bu_snowflake
        
            #args to override system defaults goes here namely 
            username, password, database, schema, warehouse, role like this
            """
                conxn = bu_snowflake.get_connection(
                    username= "",
                    password= "",
                    warehouse= "",
                    role= "",
                    schema= "",
                    database= "",
                )
            """
            conxn = bu_snowflake.get_connection()
        
            try:
                with conxn.cursor() as cursor:
                    cursor.execute("SQL QUERY GOES HERE")
            except Execption as e:
                print(f"error occurred : {e}")
            finally:
                conxn.close()
        
Platform: any
Classifier: Development Status :: 5 - Production/Stable
Classifier: Programming Language :: Python
Requires-Python: >=3.5.0
Description-Content-Type: text/x-rst; charset=UTF-8
Provides-Extra: testing
